#-------------------------------------------------------------
#     Test: Gesti√≥n y Autenticaci√≥n de Login
#-------------------------------------------------------------
"""
Autor: Carlos Andr√©s Jim√©nez Sarmiento (CJ)

Descripci√≥n:
Este archivo contiene pruebas automatizadas para verificar el correcto
funcionamiento del sistema de autenticaci√≥n y verificaci√≥n de cuenta.
Incluye:
- Login de usuario
- Env√≠o de correo de verificaci√≥n
- Verificaci√≥n de cuenta con token

Compatible con Pytest y Allure. Tambi√©n permite ejecuci√≥n manual.
Ubicaci√≥n: Gestion_y_Autenticacion_Login/test/main_test.py
"""

import pytest
import allure
from Gestion_y_Autenticacion_Login.GestionLogin import GestionLogin
from log import log_info, log_error, log_success

#-------------------------------------------------------------
#                  TEST DE LOGIN (PYTEST + MANUAL)
#-------------------------------------------------------------

@allure.feature("Login")
@allure.title("Autenticaci√≥n de usuario con credenciales v√°lidas")
def test_login_usuario():
    """
    Test de autenticaci√≥n de usuario usando nick_name o email m√°s contrase√±a.
    """
    gestor = GestionLogin()
    credenciales = {
        "usuario": "Carlos_CJ",  # Puede ser nick_name o correo
        "contrasena": "12345678"
    }

    try:
        resultado = gestor.login_usuario(credenciales)
        print("Resultado login:", resultado)

        assert resultado["status"] == 200
        assert resultado["mensaje"] == "Acceso concedido."

        log_success("‚úÖ Test de login ejecutado correctamente.")
    except AssertionError:
        log_error("‚ùå El login no fue exitoso.")
        assert False
    except Exception as e:
        log_error(f"‚ùå Excepci√≥n en el test de login: {e}")
        assert False
    finally:
        log_info("üß™ Test de login finalizado.")

#-------------------------------------------------------------
#       TEST DE ENV√çO DE CORREO DE VERIFICACI√ìN
#-------------------------------------------------------------

@allure.feature("Correo de verificaci√≥n")
@allure.title("Env√≠o de correo con enlace de verificaci√≥n")
def test_enviar_correo_verificacion():
    """
    Test de env√≠o de correo de verificaci√≥n al usuario con token incluido.
    """
    gestor = GestionLogin()
    correo = "carjisar@gmail.com"
    nick_name = "Carlos_CJ"

    try:
        resultado = gestor.enviar_correo_verificacion(correo, nick_name)
        print("Resultado env√≠o:", resultado)

        assert resultado["status"] == 200
        assert resultado["mensaje"] == "Correo de verificaci√≥n enviado."

        log_success("‚úÖ Test de env√≠o de correo ejecutado correctamente.")
    except AssertionError:
        log_error("‚ùå El env√≠o de correo no fue exitoso.")
        assert False
    except Exception as e:
        log_error(f"‚ùå Excepci√≥n en el test de env√≠o de correo: {e}")
        assert False
    finally:
        log_info("üß™ Test de env√≠o de correo finalizado.")

#-------------------------------------------------------------
#         TEST DE VERIFICACI√ìN DE CUENTA POR TOKEN
#-------------------------------------------------------------

@allure.feature("Verificaci√≥n de Cuenta")
@allure.title("Verificaci√≥n de cuenta con token v√°lido")
def test_verificar_token():
    """
    Test completo que simula la verificaci√≥n de cuenta con un token generado.
    """
    gestor = GestionLogin()
    correo = "carjisar@gmail.com"
    nick_name = "Carlos_CJ"

    try:
        # Paso 1: Generar el token con el correo y nick
        resultado_envio = gestor.enviar_correo_verificacion(correo, nick_name)
        print("Resultado env√≠o:", resultado_envio)

        assert resultado_envio["status"] == 200
        token = resultado_envio["data"]["token"]

        # Paso 2: Verificar el token recibido (como si el usuario hiciera clic)
        resultado_verificacion = gestor.verificar_token(token)
        print("Resultado verificaci√≥n:", resultado_verificacion)

        assert resultado_verificacion["status"] == 200
        assert resultado_verificacion["mensaje"] == "Cuenta verificada correctamente."

        log_success("‚úÖ Test de verificaci√≥n de cuenta ejecutado correctamente.")
    except AssertionError:
        log_error("‚ùå La verificaci√≥n de cuenta no fue exitosa.")
        assert False
    except Exception as e:
        log_error(f"‚ùå Excepci√≥n en el test de verificaci√≥n: {e}")
        assert False
    finally:
        log_info("üß™ Test de verificaci√≥n de cuenta finalizado.")

#-------------------------------------------------------------
#              EJECUCI√ìN MANUAL (OPCIONAL)
#-------------------------------------------------------------

if __name__ == "__main__":
    try:
        print("\nüîπ EJECUTANDO TEST DE LOGIN")
        test_login_usuario()

        print("\nüîπ EJECUTANDO TEST DE ENV√çO DE CORREO")
        test_enviar_correo_verificacion()

        print("\nüîπ EJECUTANDO TEST DE VERIFICACI√ìN DE CUENTA")
        test_verificar_token()

    except Exception as e:
        log_error(f"‚ùå Error al ejecutar manualmente: {e}")
